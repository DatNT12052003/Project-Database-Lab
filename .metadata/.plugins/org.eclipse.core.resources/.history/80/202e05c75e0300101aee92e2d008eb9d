package model.schedule;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import connection_database.DatabaseConnection;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import model.room.Room;

public class ScheduleDAO {
	public ObservableList<Schedule> getAllSchedules() {
        String sql = "SELECT * FROM schedules";
        ObservableList<Schedule> scheduleList = FXCollections.observableArrayList();

        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet resultSet = stmt.executeQuery(sql)) {

            while (resultSet.next()) {
                Schedule schedule = new Schedule();
                schedule.setScheduleid(resultSet.getString("scheduleid"));  
                schedule.setDay(resultSet.getString("day")); 
                schedule.setTimeStart(resultSet.getString("timestart"));
                schedule.setTimeEnd(resultSet.getString("timeend"));  
                
                scheduleList.add(schedule); 
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return scheduleList;
    }
	
	public String generateScheduleId(String day) {
	    int count = 0;
	    String d = "";

	    switch (day) {
	        case "monday":
	            d = "MON";
	            break;
	        case "tuesday":
	            d = "TUE";
	            break;
	        case "wednesday":
	            d = "WED";
	            break;
	        case "thursday":
	            d = "THU";
	            break;
	        case "friday":
	            d = "FRI";
	            break;
	        case "saturday":
	            d = "SAT";
	            break;
	        case "sunday":
	            d = "SUN";
	            break;
	        default:
	            throw new IllegalArgumentException("Invalid day: " + day);
	    }

	    String sql = "SELECT COUNT(*) FROM schedules WHERE scheduleid LIKE ?";

	    try (Connection conn = DatabaseConnection.getConnection();
	         PreparedStatement pstmt = conn.prepareStatement(sql)) {

	        pstmt.setString(1, d + "%"); // Fix lỗi LIKE

	        ResultSet result = pstmt.executeQuery();
	        if (result.next()) {
	            count = result.getInt(1);
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }

	    // Nếu muốn bắt đầu từ 1 thay vì 0, tăng count lên 1
	    String scheduleId = d + String.format("%02d", count + 1);

	    return scheduleId;
	}
	
	public void insertSchedule(String day, String timeStart, String timeEnd) {
		String sql = "INSERT INTO schedules (scheduleid, day, timestart, timeend) VALUES (?, ?, ?, ?)";
		
	    try (Connection conn = DatabaseConnection.getConnection();
		         PreparedStatement pstmt = conn.prepareStatement(sql)) {

			    pstmt.setString(1, generateScheduleId(day));
			    pstmt.setString(2, day);
		        pstmt.setString(3, timeStart);
		        pstmt.setString(4, timeEnd);
		        
		        int affectedRows = pstmt.executeUpdate();
		        
	            if (affectedRows > 0) {
	                System.out.println("Insert completed!");
	            } else {
	                System.out.println("Error insert!");
	            }
		    } catch (SQLException e) {
		        e.printStackTrace();
		    }
	}
	
}
