package model.user;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import connection_database.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

public class UserDAO {
	
	public User getUserByAccount(String account) {
	    String sql = "SELECT * FROM users WHERE account = ?";
	    User user = null;

	    try (Connection conn = DatabaseConnection.getConnection();
	         PreparedStatement pstmt = conn.prepareStatement(sql)) {

	        pstmt.setString(1, account);
	        ResultSet resultSet = pstmt.executeQuery();

	        if (resultSet.next()) {
	            user = new User();
	            user.setAccount(resultSet.getString("account"));
	            user.setPassword(resultSet.getString("password"));
	            user.setRole(resultSet.getString("role"));
	            user.setStatus(resultSet.getString("status"));
	        }

	    } catch (SQLException e) {
	        e.printStackTrace();
	    }

	    return user;
	}
	
	public ObservableList<User> getAllUsers() {
        String sql = "SELECT * FROM users";
        ObservableList<User> userList = FXCollections.observableArrayList();

        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet resultSet = stmt.executeQuery(sql)) {

            while (resultSet.next()) {
                User user = new User();
                user.setUserid(resultSet.getString("userid"));  
                user.setAccount(resultSet.getString("account")); 
                user.setPassword(resultSet.getString("password")); 
                user.setRole(resultSet.getString("role"));  
                user.setStatus(resultSet.getString("status"));  
                user.setCreatedDate(resultSet.getString("createdDate")); 

                userList.add(user); 
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return userList;
    }
    
	public void insertUser(String account, String password, String role, String createdDate) {
		String sql = "INSERT INTO users (userid, account, password, role, status, createddate) VALUES (?, ?, ?, ?, 'active', ?)";
		
		try (Connection conn = DatabaseConnection.getConnection();
				PreparedStatement pstmt = conn.prepareStatement(sql)){
			pstmt.setString(1, generateUserid(role));
			pstmt.setString(2, account);
			pstmt.setString(3, password);
			pstmt.setString(4, role);
			pstmt.setString(5, createdDate);
			
			int affectedRows = pstmt.executeUpdate();
			
            if (affectedRows > 0) {
                System.out.println("Insert completed!");
            } else {
                System.out.println("Error insert!");
            }
			
		}catch(SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void updateUser(String userid, String account, String password, String role, String status, String createdDate) {
	    String sql = "UPDATE users SET account = ?, password = ?, role = ?, status = ?, createdDate = ? WHERE userid = ?";

	    try (Connection conn = DatabaseConnection.getConnection();
	         PreparedStatement pstmt = conn.prepareStatement(sql)) {

	        pstmt.setString(1, account);
	        pstmt.setString(2, password);
	        pstmt.setString(3, role);
	        pstmt.setString(4, status);
	        pstmt.setString(5, createdDate);
	        pstmt.setString(6, userid);

	        int affectedRows = pstmt.executeUpdate();

	        if (affectedRows > 0) {
	            System.out.println("Update successful!");
	        } else {
	            System.out.println("Error updating user!");
	        }

	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	}	
	
	public void updateStatusUser(String userid, String status) {
	    String sql = "UPDATE users SET status = ? WHERE userid = ?";

	    try (Connection conn = DatabaseConnection.getConnection();
	         PreparedStatement pstmt = conn.prepareStatement(sql)) {

	        pstmt.setString(1, status);
	        pstmt.setString(2, userid);

	        int affectedRows = pstmt.executeUpdate();

	        if (affectedRows > 0) {
	            System.out.println("Update successful!");
	        } else {
	            System.out.println("Error updating user!");
	        }

	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	}
	
	public void deleteUser(String userId) {
	    String sql = "DELETE FROM users WHERE userid = ?";

	    try (Connection conn = DatabaseConnection.getConnection();
	         PreparedStatement pstmt = conn.prepareStatement(sql)) {

	        pstmt.setString(1, userId);

	        int affectedRows = pstmt.executeUpdate();

	        if (affectedRows > 0) {
	            System.out.println("Delete successful!");
	        } else {
	            System.out.println("Error deleting user! User not found.");
	        }

	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	}

    public String generateUserid(String role) {
    	int count = 0;
    	String r="";
    	switch(role) {
    	case "student":
    		r = "S";
    		break;
    	case "teacher":
    		r = "T";
    		break;
    	default:
            throw new IllegalArgumentException("Invalid day: " + role);
    	}
    	
    	String sql = "SELECT COUNT(*) FROM users WHERE userid LIKE ?";
    	
	    try (Connection conn = DatabaseConnection.getConnection();
		         PreparedStatement pstmt = conn.prepareStatement(sql)) {

		        pstmt.setString(1, r + "%"); // Fix lỗi LIKE

		        ResultSet result = pstmt.executeQuery();
		        if (result.next()) {
		            count = result.getInt(1);
		        }
		    } catch (SQLException e) {
		        e.printStackTrace();
		    }

		    // Nếu muốn bắt đầu từ 1 thay vì 0, tăng count lên 1
		    String userid = r + String.format("%09d", count + 1);
    	
    	return userid;
    	
    }
	
}
