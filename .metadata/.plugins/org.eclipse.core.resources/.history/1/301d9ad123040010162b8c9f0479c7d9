package controller.admin.management.teachers;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.stage.Stage;
import model.person.TeacherDAO;

public class AddTeacherPopUpController {
	@FXML
	private TextField fullNameTF;
	
	@FXML
	private DatePicker dobDP;
	
	@FXML
	private RadioButton maleRB;
	
	@FXML
	private RadioButton femaleRB;
	
	@FXML
	private TextField phoneTF;
	
	@FXML
	private TextField emailTF;
	
	@FXML
	private TextField expertiseTF;
	
	@FXML
	private TextField levelTF;
	
	@FXML
	private TextField salaryTF;
	
	@FXML
	private Button okButton;
	
	private ToggleGroup genderGroup = new ToggleGroup();
	
	private TeacherDAO teacherDAO = new TeacherDAO();
	
    private TeachersSceneController teachersSceneController;

    public void setTeachersSceneController(TeachersSceneController teachersSceneController) {
        this.teachersSceneController = teachersSceneController;
    }
	
	public TeachersSceneController getTeachersSceneController() {
		return teachersSceneController;
	}

	@FXML
	private void initialize() {
		maleRB.setToggleGroup(genderGroup);
		femaleRB.setToggleGroup(genderGroup);
	}
	
	@FXML
	private void handleOk() {
		String fullName = fullNameTF.getText();
		
		String dob = null;
		if(dobDP.getValue() != null) {
			dob = dobDP.getValue().toString();
		}
		
		RadioButton selectedRadio = (RadioButton) genderGroup.getSelectedToggle();
		String gender = null;
		if(selectedRadio != null) {
			gender = selectedRadio.getText();
		}
		
		String phone = phoneTF.getText();
		String email = emailTF.getText();
		
		String expertise = expertiseTF.getText();
		String level = levelTF.getText();
		int salary = 0;
		
		try {
		    salary = Integer.parseInt(salaryTF.getText());
		} catch (NumberFormatException e) {
			showErrorAlert("Error", "Salary must positive integer!");
		}

		
		if(fullName.isEmpty() || dob==null || gender==null || phone.isEmpty() || email.isEmpty() || expertise.isEmpty() || level.isEmpty() || salary==0) {
			showErrorAlert("Error", "Not enough information has been entered!");
		}else if (!phone.matches("\\d{10}")) {
		    showErrorAlert("Error", "Phone number must have 10 digits!");
		} else if (!email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
		    showErrorAlert("Error", "Invalid email format!");
		} else if (salary<0) {
		    showErrorAlert("Error", "Can salary be negative?");
		}else {
			teacherDAO.insertTeacher(fullName, dob, gender, phone, email, expertise, level, salary);
			String message = "Teacher ID: " + teacherDAO.generateTeacherID() + "\n"
					+ "Full Name: " + fullName + "\n"
                    + "Date Of Birth: " + dob + "\n"
                    + "Gender: " + gender + "\n"
                    + "Phone: " + phone + "\n"
                    + "Email: " + email + "\n"
                    + "Expertise: " + expertise + "\n"
                    + "Level: " + level + "\n"
                    + "Salary: " + salary;
			
			showCompletedAlert("Success", message);
			
	        ((Stage) okButton.getScene().getWindow()).close();
	        
		}
	}
	
    private void showErrorAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText("ERROR");
        alert.setContentText(message);
        alert.showAndWait();
    }
    
    private void showCompletedAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText("Teacher Created Successfully!");
        alert.setContentText(message);
        alert.showAndWait();
    }
	
}
