package controller.admin.management.teachers;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Optional;

import connection_database.DatabaseConnection;
import javafx.collections.FXCollections;

import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Modality;
import javafx.stage.Stage;
import model.person.Student;
import model.person.Teacher;
import model.person.TeacherDAO;
import model.user.User;
import model.user.UserDAO;

public class TeachersSceneController {
	@FXML
	private TextField searchTF;
	
	@FXML
	private ComboBox<String> typeSearchCB;
	
	@FXML
	private TableView<Teacher> teachersTable;
	
	@FXML
	private TableColumn<Teacher, String> teacheridColumn;
	
	@FXML
	private TableColumn<Teacher, String> fullNameColumn;
	
	@FXML
	private TableColumn<Teacher, String> dateOfBirthColumn;
	
	@FXML
	private TableColumn<Teacher, String> expertiseColumn;
	
	@FXML
	private TableColumn<Teacher, String> levelColumn;
	
	@FXML
	private TableColumn<Teacher, Integer> salaryColumn;
	
	@FXML
	private Button addButton;
	
	@FXML
	private Button updateButton;
	
	@FXML
	private Button deleteButton;
	
	@FXML
	private Button detailButton;
	
	
	private ObservableList<Teacher> teacherList = FXCollections.observableArrayList();
	
	private TeacherDAO teacherDAO;
	
//	private User user;
//	
//	private TeacherDAO teacherDAO;
//	
//	private Teacher teacher;
//	
//	private StudentDAO studentDAO;
//	
//	private Student student;
	
	@FXML
	private void initialize() {
		teacherDAO = new TeacherDAO();
		teacherList = teacherDAO.getAllTeachers();
		
		teacheridColumn.setCellValueFactory(new PropertyValueFactory<>("teacherid"));
		teacheridColumn.setStyle("-fx-alignment: CENTER;");
		fullNameColumn.setCellValueFactory(new PropertyValueFactory<>("fullName"));
		fullNameColumn.setStyle("-fx-alignment: CENTER;");
		dateOfBirthColumn.setCellValueFactory(new PropertyValueFactory<>("dateOfBirth"));
		dateOfBirthColumn.setStyle("-fx-alignment: CENTER;");
		expertiseColumn.setCellValueFactory(new PropertyValueFactory<>("expertise"));
		expertiseColumn.setStyle("-fx-alignment: CENTER;");
		levelColumn.setCellValueFactory(new PropertyValueFactory<>("level"));
		levelColumn.setStyle("-fx-alignment: CENTER;");
		salaryColumn.setCellValueFactory(new PropertyValueFactory<>("salary"));
		salaryColumn.setStyle("-fx-alignment: CENTER;");
		
		teachersTable.setItems(teacherList);
		
		typeSearchCB.getItems().addAll("Teacher ID", "Full Name", "Expertise", "Level", "Salary");
		typeSearchCB.setValue("Teacher ID");
		
		searchTF.textProperty().addListener((observable, oldValue, newValue) -> filterTeachers(newValue));
		
	}
	
	@FXML
	private void handleAddTeacher() {
		  try {
		        FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/admin/management/teachers/UpdateTeacherPopUp.fxml"));
		        Parent root = loader.load();

		        AddTeacherPopUpController popUpController = loader.getController();

		        Stage stage = new Stage();
		        stage.setTitle("Update Teacher");
		        stage.setScene(new Scene(root));
		        stage.setResizable(false);
		        stage.initModality(Modality.APPLICATION_MODAL);
		        stage.showAndWait();
		        
		        popUpController.setTeachersSceneController(this);
		        
		        refreshTeacherList();

		    } catch (IOException e) {
		        e.printStackTrace();
		    }
	}
	
//	@FXML
//	private void handleUpdateUser() {
//	    User selectedUser = usersTable.getSelectionModel().getSelectedItem(); // Lấy user được chọn
//
//	    if (selectedUser == null) {
//	    	showErrorAlert("Error", "Please select a user to update!");
//	        return;
//	    }
//	    
//	    if(selectedUser.getAccount().equals("admin")) {
//	    	showErrorAlert("Error", "Can not update ADMIN!");
//	        return;
//	    }
//
//	    try {
//	        FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/admin/management/users/UpdateUserPopUp.fxml"));
//	        Parent root = loader.load();
//
//	        UpdateUserPopUpController popUpController = loader.getController();
//	        popUpController.setUser(selectedUser); // Truyền dữ liệu user sang cửa sổ cập nhật
//	        popUpController.setUsersSceneController(this); // Thiết lập lại controller chính
//
//	        Stage stage = new Stage();
//	        stage.setTitle("Update User");
//	        stage.setScene(new Scene(root));
//	        stage.setResizable(false);
//	        stage.initModality(Modality.APPLICATION_MODAL);
//	        stage.showAndWait();
//
//	        refreshUserList(); // Làm mới danh sách sau khi cập nhật
//
//	    } catch (IOException e) {
//	        e.printStackTrace();
//	    }
//	}
	
//	@FXML
//	private void handleDelete() {
//	    User selectedUser = usersTable.getSelectionModel().getSelectedItem(); // Lấy user được chọn
//
//	    if (selectedUser == null) {
//	    	showErrorAlert("Error", "Please select a user to update!");
//	        return;
//	    }else if(selectedUser.getAccount().equals("admin")) {
//	    	showErrorAlert("Error", "Can not delete ADMIN!");
//	        return;
//	    } else {
//			boolean confirmed = showConfirmation("Confirm", "Are you sure you want to delete?");
//			if (confirmed) {
//			    userDAO.deleteUser(selectedUser.getUserid());
//			}
//	    }
//	    
//	    refreshUserList(); 
//	}

	
//	@FXML
//	private void handleDetail() {
//	    User selectedUser = usersTable.getSelectionModel().getSelectedItem();
//	    
//	    if (selectedUser == null) {
//	        showErrorAlert("Error", "Please select a user to update!");
//	        return;
//	    }
//
//	    try {
//	        FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/admin/management/users/DetailUserPopUp.fxml"));
//	        Parent root = loader.load();
//
//	        DetailUserPopUpController popUpController = loader.getController();
//	        
//	        // Lấy dữ liệu chi tiết dựa trên role
//	        Student student = null;
//	        Teacher teacher = null;
//	        
//	        if ("student".equals(selectedUser.getRole())) {
//	            student = userJoinStudents(selectedUser.getUserid());
//	        } else if ("teacher".equals(selectedUser.getRole())) {
//	            teacher = userJoinTeachers(selectedUser.getUserid());
//	        }
//
//	        popUpController.setData(selectedUser, teacher, student);
//	        popUpController.setUsersSceneController(this);
//
//	        Stage stage = new Stage();
//	        stage.setTitle("Detail User");
//	        stage.setScene(new Scene(root));
//	        stage.setResizable(false);
//	        stage.initModality(Modality.APPLICATION_MODAL);
//	        stage.showAndWait();
//
//	    } catch (IOException e) {
//	        e.printStackTrace();
//	    }
//	}

	private void filterTeachers(String searchText) {
	    if (searchText == null || searchText.isEmpty()) {
	        teachersTable.setItems(teacherList); // Không lọc nếu ô tìm kiếm trống
	        return;
	    }

	    String selectedType = typeSearchCB.getValue(); // Lấy giá trị của ComboBox

	    ObservableList<Teacher> filteredList = FXCollections.observableArrayList();

	    for (Teacher teacher : teacherList) {
	        if (selectedType.equals("Teacher ID") && teacher.getTeacherid().toLowerCase().contains(searchText.toLowerCase())) {
	            filteredList.add(teacher);
	        } else if (selectedType.equals("Full Name") && teacher.getFullName().toLowerCase().contains(searchText.toLowerCase())) {
	            filteredList.add(teacher);
	        } else if (selectedType.equals("Expertise") && teacher.getExpertise().toLowerCase().contains(searchText.toLowerCase())) {
	            filteredList.add(teacher);
	        } else if (selectedType.equals("Level") && teacher.getLevel().toLowerCase().contains(searchText.toLowerCase())) {
	            filteredList.add(teacher);
	        } else if (selectedType.equals("Salary") && String.valueOf(teacher.getSalary()).toLowerCase().contains(searchText.toLowerCase())) {
	            filteredList.add(teacher);
	        } 
	    }

	    teachersTable.setItems(filteredList);
	}

	public void refreshTeacherList() {
		teachersTable.setItems(FXCollections.observableArrayList(teacherDAO.getAllTeachers()));
    }
	
    private void showErrorAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText("ERROR");
        alert.setContentText(message);
        alert.showAndWait();
    }
    
    public boolean showConfirmation(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);

        alert.getButtonTypes().setAll(ButtonType.YES, ButtonType.NO);

        Optional<ButtonType> result = alert.showAndWait();

        return result.isPresent() && result.get() == ButtonType.YES;
    }
    
    public Student userJoinStudents(String userid) {
        String sql = "SELECT * FROM users INNER JOIN students ON users.UserID = students.StudentID WHERE users.UserID = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, userid);
            ResultSet resultSet = pstmt.executeQuery();

            if (resultSet.next()) {
                Student student = new Student();
                student.setFullName(resultSet.getString("fullName"));
                student.setDateOfBirth(resultSet.getString("dateofbirth"));
                student.setGender(resultSet.getString("gender"));
                student.setPhone(resultSet.getString("phone"));
                student.setEmail(resultSet.getString("email"));
                return student;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public Teacher userJoinTeachers(String userid) {
        String sql = "SELECT * FROM users INNER JOIN teachers ON users.UserID = teachers.TeacherID WHERE users.UserID = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, userid);
            ResultSet resultSet = pstmt.executeQuery();

            if (resultSet.next()) {
                Teacher teacher = new Teacher();
                teacher.setFullName(resultSet.getString("fullName"));
                teacher.setDateOfBirth(resultSet.getString("dateofbirth"));
                teacher.setGender(resultSet.getString("gender"));
                teacher.setPhone(resultSet.getString("phone"));
                teacher.setEmail(resultSet.getString("email"));
                return teacher;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

}
