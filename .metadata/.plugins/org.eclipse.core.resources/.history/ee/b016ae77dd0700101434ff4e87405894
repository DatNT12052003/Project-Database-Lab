package controller.admin.management.courses;

import hash_password.HashPassword;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import model.schedule.Schedule;
import model.schedule.ScheduleDAO;
import model.subject.Subject;
import model.subject.SubjectDAO;
import model.course.Course;
import model.course.CourseDAO;
import model.course_schedule.CourseScheduleDAO;
import model.person.Teacher;
import model.person.TeacherDAO;
import model.room.Room;
import model.room.RoomDAO;
import model.user.UserDAO;

public class AddCoursePopUpController {
	
	@FXML
	private ComboBox<Subject> subjectNameCB;
	
	@FXML
	private ComboBox<Teacher> teacherCB;
	
	@FXML
	private ComboBox<Room> roomCB;
	
	@FXML
	private DatePicker regisStartCourseDateDP;
	
	@FXML
	private DatePicker courseStartDateDP;
	
	@FXML
	private ComboBox<String> statusCB;
	
	@FXML
	private ComboBox<Schedule> scheduleCB;
	
	@FXML
	private TableView<Schedule> schedulesTable;
	
	@FXML
	private TableColumn<Schedule, String> scheduleidColumn;
	
	@FXML
	private TableColumn<Schedule, String> dayColumn;
	
	@FXML
	private TableColumn<Schedule, String> timeStartColumn;
	
	@FXML
	private TableColumn<Schedule, String> timeEndColumn;
	
	@FXML
	private Button addButton;
	
	@FXML
	private Button removeButton;
	
	@FXML
	private Button okButton;
	
	private CourseDAO courseDAO = new CourseDAO();
	
	private CourseScheduleDAO courseScheduleDAO = new CourseScheduleDAO();
	
    private CoursesSceneController coursesSceneController;

    public void setCoursesSceneController(CoursesSceneController coursesSceneController) {
        this.coursesSceneController = coursesSceneController;
    }
	
	public CoursesSceneController getCoursesSceneController() {
		return coursesSceneController;
	}
	
	private SubjectDAO subjectDAO;
	private ObservableList<Subject> subjectList = FXCollections.observableArrayList();
	private TeacherDAO teacherDAO;
	private ObservableList<Teacher> teacherList = FXCollections.observableArrayList();
	private RoomDAO roomDAO;
	private ObservableList<Room> roomList = FXCollections.observableArrayList();
	private ScheduleDAO scheduleDAO;
	private ObservableList<Schedule> scheduleList = FXCollections.observableArrayList();
	
	private ObservableList<Schedule> scheduleSelectedList = FXCollections.observableArrayList();

	@FXML
	private void initialize() {
		subjectDAO = new SubjectDAO();
		teacherDAO = new TeacherDAO();
		roomDAO = new RoomDAO();
		scheduleDAO = new ScheduleDAO();
		
	    subjectList = subjectDAO.getAllSubjects();
	    teacherList = teacherDAO.getAllTeachers();
	    roomList = roomDAO.getAllRooms();
	    scheduleList = scheduleDAO.getAllSchedules();

	    subjectNameCB.setItems(subjectList);
	    roomCB.setItems(roomList);
	    scheduleCB.setItems(scheduleList);
	    statusCB.setItems(FXCollections.observableArrayList("Registrantion", "Ongoing", "Canceled", "Completed"));
	    
	    subjectNameCB.setOnAction(e -> {
            Subject selectedSubject = subjectNameCB.getValue();
            if(selectedSubject!=null) {
                teacherList = teacherDAO.getTeachersBySubject(subjectName(selectedSubject.getName()));
                scheduleSelectedList.clear();
                teacherCB.setItems(teacherList);
            }
        });
	    
	    teacherCB.setOnAction(e -> {
            Teacher selectedTeacher = teacherCB.getValue();
            
            if(selectedTeacher!=null) {
            	scheduleList = FXCollections.observableArrayList(scheduleDAO.getSchedulesNotInTeacherid(selectedTeacher.getTeacherid()));
            	scheduleSelectedList.clear();
            	scheduleCB.setItems(scheduleList);
            }
        });
	    
	    roomCB.setOnAction(e -> {
            Room selectedRoom = roomCB.getValue();
            
            if(selectedRoom!=null) {
            	scheduleList = FXCollections.observableArrayList(scheduleDAO.getSchedulesNotInRoomid(selectedRoom.getRoomid()));
            	scheduleSelectedList.clear();
            	scheduleCB.setItems(scheduleList);
            }
        });
	    

		scheduleSelectedList = FXCollections.observableArrayList();
		
		scheduleidColumn.setCellValueFactory(new PropertyValueFactory<>("scheduleid"));
		scheduleidColumn.setStyle("-fx-alignment: CENTER;");
		dayColumn.setCellValueFactory(new PropertyValueFactory<>("day"));
		dayColumn.setStyle("-fx-alignment: CENTER;");
		timeStartColumn.setCellValueFactory(new PropertyValueFactory<>("timeStart"));
		timeStartColumn.setStyle("-fx-alignment: CENTER;");
		timeEndColumn.setCellValueFactory(new PropertyValueFactory<>("timeEnd"));
		timeEndColumn.setStyle("-fx-alignment: CENTER;");
		
		
        addButton.setOnAction(e -> {
            Schedule selectedSchedule = scheduleCB.getValue();
            if (selectedSchedule != null) {
            	scheduleSelectedList.add(selectedSchedule);
                scheduleList.remove(selectedSchedule);
                scheduleCB.setValue(null);
            }
        });
        
        removeButton.setOnAction(e -> {
        	Schedule selectedSchedule = schedulesTable.getSelectionModel().getSelectedItem();
            if (selectedSchedule != null) {
                scheduleList.add(selectedSchedule);
                scheduleSelectedList.remove(selectedSchedule);
            }
        });
		
		
		schedulesTable.setItems(scheduleSelectedList);
	    
	}

	
	@FXML
	private void handleOk() {
		
		String subjectid = null;
		String teacherid = null;
		String roomid = null;
		String status = null;
		
		if(subjectNameCB!=null) {
			subjectid = subjectNameCB.getValue().getSubjectid();
		}
		
		if(teacherCB.getValue()!=null) {
			teacherid = teacherCB.getValue().getTeacherid();
		}
		
		if(teacherCB.getValue()!=null) {
			roomid = roomCB.getValue().getRoomid();
		}
		
		if(statusCB.getValue()!=null) {
			status = statusCB.getValue();
		}
		
		String regisStartCourseDate = null;
		if (regisStartCourseDateDP.getValue() != null) {
		    regisStartCourseDate = regisStartCourseDateDP.getValue().toString();
		}

		String courseStartDate = null;
		if (courseStartDateDP.getValue() != null) {
		    courseStartDate = courseStartDateDP.getValue().toString();
		}
		
		int countSchedule = scheduleSelectedList.size();
		
		String courseid = courseDAO.generateCourseid();
		
		if(subjectid==null || teacherid==null || roomid==null || regisStartCourseDate==null || courseStartDate==null) {
			showErrorAlert("Error", "Not enough information has been entered!");
		}else {
			courseDAO.insertCourse(roomid, teacherid, subjectid, regisStartCourseDate, courseStartDate, status);
			int i = 0;
			String schedule = "";
			while (i < countSchedule) {
				System.out.println("Primary Key: " + courseScheduleDAO.generateCourseScheduleid() + ", Courseid: " + courseid);
				courseScheduleDAO.insertCourseSchedule(courseid, scheduleSelectedList.get(i).getScheduleid());
			    schedule = schedule + scheduleSelectedList.get(i).toString() + ", ";
			    i++;
			}

			String message = "Course ID: " + courseid + "\n"
								+ "Subject Name: " + subjectNameCB.getValue() + "\n"
								+ "Teacher: " + teacherCB.getValue() + "\n"
								+ "Room: " + roomCB.getValue() + "\n"
					            + "Status: " + status + "\n"
					            + "Schedule: " + schedule + "\n";
	
			showCompletedAlert("Success", message);
			
		    ((Stage) okButton.getScene().getWindow()).close();
		}
	}
	
	
	
    private void showErrorAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText("ERROR");
        alert.setContentText(message);
        alert.showAndWait();
    }
    
    private void showCompletedAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText("Teacher Created Successfully!");
        alert.setContentText(message);
        alert.showAndWait();
    }
    
    private String subjectName(String name) {
        String prefix = "";
        
        if(name.contains("English")) {
        	prefix = "English";
        }else if(name.contains("Japanese")) {
        	prefix = "Japanese";
        }else if(name.contains("Chinese")) {
        	prefix = "Chinese";
        }else if(name.contains("Korean")) {
        	prefix = "Korean";
        }else if(name.contains("Russian")) {
        	prefix = "Russian";
        }else if(name.contains("French")) {
        	prefix = "French";
        }else if(name.contains("German")) {
        	prefix = "German";
        }
        
        return prefix;
    }
	
}
