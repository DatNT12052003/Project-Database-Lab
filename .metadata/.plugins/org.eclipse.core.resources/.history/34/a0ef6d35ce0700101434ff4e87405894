package model.course;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.security.auth.Subject;

import connection_database.DatabaseConnection;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import model.person.Teacher;
import model.person.TeacherDAO;
import model.room.Room;
import model.room.RoomDAO;
import model.subject.SubjectDAO;
import model.user.User;

public class CourseDAO {
	
	
	public ObservableList<Course> getAllCourses() {
        String sql = "SELECT * FROM courses WHERE status NOT IN ('Canceled', 'Completed') OR status IS NULL";
        ObservableList<Course> courseList = FXCollections.observableArrayList();

        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet resultSet = stmt.executeQuery(sql)) {

            while (resultSet.next()) {
                Course course = new Course();
                TeacherDAO teacherDAO = new TeacherDAO();
                SubjectDAO subjectDAO = new SubjectDAO();
                RoomDAO roomDAO = new RoomDAO();

                course.setCourseid(resultSet.getString("courseid"));
                course.setCurrentStudents(resultSet.getInt("currentstudents"));
                course.setRegisStartDate(resultSet.getString("regisstartdate"));
                course.setCourseStartDate(resultSet.getString("coursestartdate"));
                course.setStatus(resultSet.getString("status"));
                course.setTeacher(teacherDAO.getTeacherById(resultSet.getString("teacherid")));
                course.setSubject(subjectDAO.getSubjectById(resultSet.getString("subjectid")));
                course.setRoom(roomDAO.getRoomById(resultSet.getString("roomid")));
                
                courseList.add(course); 
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return courseList;
    }
	
	private int getCountCourses() {
		int count = 0;
		String sql = "SELECT COUNT(*) FROM courses";
		
		try(Connection conn = DatabaseConnection.getConnection();
	             Statement stmt = conn.createStatement();
	             ResultSet result = stmt.executeQuery(sql)){
			
			if (result.next()) {
                count = result.getInt(1);
            }

		}catch(SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
    
    public List<String> getCourseid() {
        String sql = "SELECT courseid FROM courses";
        List<String> idList = new ArrayList<>();

        try (Connection conn = DatabaseConnection.getConnection();
        		Statement stmt = conn.createStatement();
                ResultSet resultSet = stmt.executeQuery(sql)) {

        	while(resultSet.next()) {
        		idList.add(resultSet.getString(1));
        	}

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return idList;
    }
    
    public String generateCourseid() {
        int count = 1;

        List<String> idList = getCourseid();

        while(count<=idList.size()) {
    		String courseid = String.format("C%05d", count);
    		if(!idList.contains(courseid)) {
    			return courseid;
    		}
    		count++;
    	}
        
        count = getCountCourses() + 1;

        return String.format("T%09d", count);
    }
	
	public void insertTeacher(String fullName, String dateOfBirth, String gender, String address, String phone, String email, String expertise, String level, int salary) {
		String sql = "INSERT INTO teachers (teacherid, fullname, dateofbirth, gender, address, phone, email, expertise, level, salary) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		
	    try (Connection conn = DatabaseConnection.getConnection();
		         PreparedStatement pstmt = conn.prepareStatement(sql)) {

		        pstmt.setString(1, generateTeacherID());
		        pstmt.setString(2, fullName);
		        pstmt.setString(3, dateOfBirth);
		        pstmt.setString(4, gender);
		        pstmt.setString(5, address);
		        pstmt.setString(6, phone);
		        pstmt.setString(7, email);
		        pstmt.setString(8, expertise);
		        pstmt.setString(9, level);
		        pstmt.setInt(10, salary);
		        
		        int affectedRows = pstmt.executeUpdate();
		        
	            if (affectedRows > 0) {
	                System.out.println("Insert completed!");
	            } else {
	                System.out.println("Error insert!");
	            }
		    } catch (SQLException e) {
		        e.printStackTrace();
		    }
	}
	
	
}
